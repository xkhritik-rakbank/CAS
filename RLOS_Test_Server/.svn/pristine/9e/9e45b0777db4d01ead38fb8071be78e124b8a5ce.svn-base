//----------------------------------------------------------------------------------------------------
//		NEWGEN SOFTWARE TECHNOLOGIES LIMITED
//Group						: AP2
//Product / Project			: RLOS
//Module					: CAS
//File Name					: RLOS_Operation_Maker.java
//Author					: Deepak Kumar
//Date written (DD/MM/YYYY)	: 06/08/2017
//Description				: 
//----------------------------------------------------------------------------------------------------


package com.newgen.omniforms.user;
import com.newgen.omniforms.FormReference;
import com.newgen.omniforms.context.FormContext;
import com.newgen.omniforms.event.ComponentEvent;
import com.newgen.omniforms.event.FormEvent;
import com.newgen.omniforms.excp.CustomExceptionHandler;
import com.newgen.omniforms.listener.FormListener;
import javax.faces.application.*;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;

import javax.faces.validator.ValidatorException;


public class RLOS_Operation_Maker extends RLOSCommon implements FormListener
 {
	
	
		
	private static final long serialVersionUID = 1L;
		public void formLoaded(FormEvent pEvent)
		{
			//RLOS.mLogger.info("Inside TelesalesInitiation RLOS");
			//RLOS.mLogger.info( "Inside formLoaded()" + pEvent.getSource().getName());
			
		}		
		public void formPopulated(FormEvent pEvent) {
	        FormReference formObject = FormContext.getCurrentInstance().getFormReference();
	        try{
	           //RLOS.mLogger.info("Inside TelesalesInitiation RLOS");
	            //RLOS.mLogger.info( "Inside formPopulated()" + pEvent.getSource());
	            SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
	            String currDate = format.format(Calendar.getInstance().getTime());
	             //RLOS.mLogger.info( "currTime:" + currDate);
	           // formObject.setNGValue("Intro_Date",currDate);
	            formObject.setNGValue("Intro_Date",formObject.getNGValue("Created_Date"));
	            formObject.setNGValue("Channel_Name","Paper based Initiation");
	             if(formObject.getNGValue("cmplx_Customer_FIrstNAme")==null)
	            {
	            	 formObject.setNGValue("cmplx_Customer_FIrstNAme","");
	            }
	             
	             else if(formObject.getNGValue("cmplx_Customer_MiddleName")==null)
	            {
	            	 formObject.setNGValue("cmplx_Customer_MiddleName","");
	            }
	             
	             else if( formObject.getNGValue("cmplx_Customer_LAstNAme")==null)
	            {
	            	formObject.setNGValue("cmplx_Customer_LAstNAme","");
	            }
	             else
	                 formObject.setNGValue("Cust_Name",formObject.getNGValue("cmplx_Customer_FIrstNAme")+formObject.getNGValue("cmplx_Customer_MiddleName")+formObject.getNGValue("cmplx_Customer_LAstNAme"));

	        }catch(Exception e)
	        {
	        	// //RLOS.logException(e);
	            //RLOS.mLogger.info( "Exception:"+e.getMessage());
	        }
	    }
		
		public void eventDispatched(ComponentEvent pEvent) throws ValidatorException
		{
			@SuppressWarnings("unused")
			FormReference formObject = FormContext.getCurrentInstance().getFormReference();
			String popupFlag="N";
			String popUpMsg="";
			String popUpControl="";
			try
			{
				switch (pEvent.getType()) 
				{
				case FRAME_EXPANDED:
					new RLOSCommonCode().call_Frame_Expanded(pEvent);				
					break;
					  
				case FRAGMENT_LOADED:
					new RLOS_Initiation().call_Fragement_Loaded(pEvent);			
					break;
				
				case FRAME_COLLAPSED: {
					break;
				}
				
				default:
					break;
			}
				
		}
			catch(ValidatorException valExcp)
			{
				 //RLOS.logException(valExcp);
				if("Y".equalsIgnoreCase(popupFlag))
				{
					
					if("".equals(popUpControl))
					{
						throw new ValidatorException(new FacesMessage(popUpMsg));
					}else
					{
						throw new ValidatorException(new FacesMessage(popUpMsg,popUpControl));

					}
					
				}
				else{
				HashMap<String,String> hm=new HashMap<String,String>();
				hm.put("Error","Checked");
				if(!"".equals(popUpMsg)) {
					try{ throw new ValidatorException(new CustomExceptionHandler("Details Fetched", popUpMsg,"EventType", hm));}finally{hm.clear();}
					
				} else {
					try{ throw new ValidatorException(new CustomExceptionHandler("Error Message", "Text1","EventType", hm));}finally{hm.clear();}
					
				}
				
				}
			}
			catch(Exception ex)
			{				
				// //RLOS.logException(ex);
				//RLOS.mLogger.info("exception in eventdispatched="+ ex);				
			}
	}
	
		public void saveFormCompleted(FormEvent pEvent) {
			//RLOS.mLogger.info( "Inside saveFormCompleted()" + pEvent);
			FormContext.getCurrentInstance().getFormReference();
			 

		}


		public void submitFormCompleted(FormEvent pEvent)
				throws ValidatorException {
			//RLOS.mLogger.info( "Inside submitFormCompleted()" + pEvent);


		}

		public void continueExecution(String eventHandler, HashMap<String, String> m_mapParams) {
			//RLOS.mLogger.info( "Inside continueExecution() method");
		}


		public void initialize() {
			//RLOS.mLogger.info( "Inside initialize()");
		}
		
	public void saveFormStarted(FormEvent arg0) throws ValidatorException {
		//RLOS.mLogger.info( "Inside saveFormStarted()");
		
	}
	public void submitFormStarted(FormEvent arg0) throws ValidatorException {
		//RLOS.mLogger.info( "Inside submitFormStarted()");
		
	}
	public String decrypt(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}
	public String encrypt(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}
}
